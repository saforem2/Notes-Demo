/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => footnoteIndicator
});
var import_obsidian = __toModule(require("obsidian"));
var footnoteIndicator = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.countFootnotes = () => {
      const mdView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      let newStatusBarText = "";
      if (mdView !== null && mdView.getViewData()) {
        const content = mdView.getViewData();
        const regularFn = content.match(/\[\^\S+](?!:)/g);
        const inlineFn = content.match(/\^\[[^^].+?]/g);
        let overallFn = 0;
        if (regularFn)
          overallFn += regularFn.length;
        if (inlineFn)
          overallFn += inlineFn.length;
        if (overallFn)
          newStatusBarText = overallFn.toString() + " fn";
      }
      this.footnoteStatusBar.setText(newStatusBarText);
    };
    this.countPandocCitations = () => {
      const mdView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      let newStatusBarText = "";
      if (mdView !== null && mdView.getViewData()) {
        const content = mdView.getViewData();
        let pandocCitations = content.match(/@[A-Za-z0-9-]+[,;\]](?!\()/gi);
        if (pandocCitations) {
          pandocCitations = [...new Set(pandocCitations)];
          newStatusBarText = pandocCitations.length.toString() + " ct";
        }
      }
      this.citationStatusBar.setText(newStatusBarText);
    };
  }
  onload() {
    return __async(this, null, function* () {
      const countDelay = 1e3;
      console.log("Footnote & Citation Indicator Plugin loaded.");
      this.footnoteStatusBar = this.addStatusBarItem();
      this.footnoteStatusBar.setText("");
      this.citationStatusBar = this.addStatusBarItem();
      this.citationStatusBar.setText("");
      this.registerEvent(this.app.workspace.on("file-open", this.countFootnotes));
      this.registerEvent(this.app.workspace.on("editor-change", (0, import_obsidian.debounce)(this.countFootnotes, countDelay, true)));
      this.registerEvent(this.app.workspace.on("file-open", this.countPandocCitations));
      this.registerEvent(this.app.workspace.on("editor-change", (0, import_obsidian.debounce)(this.countPandocCitations, countDelay, true)));
    });
  }
  onunload() {
    return __async(this, null, function* () {
      console.log("Footnote Indicator Plugin unloaded.");
    });
  }
};
