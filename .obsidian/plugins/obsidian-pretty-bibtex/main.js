/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PrettyBibTexPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// StringHelper.ts
var StringHelper = class {
  static sanitizeKeyString(key) {
    const allLowerCase = key.toLowerCase();
    return allLowerCase.charAt(0).toUpperCase() + allLowerCase.slice(1);
  }
  static trim(str, trim) {
    let start = 0;
    let end = str.length;
    while (start < end && str[start] === trim)
      ++start;
    while (end > start && str[end - 1] === trim)
      --end;
    return start > 0 || end < str.length ? str.substring(start, end) : str;
  }
};

// string.extensions.ts
String.prototype.trimString = function(trim) {
  return StringHelper.trim(String(this), trim);
};
String.prototype.replaceAll = function(str, replacement) {
  return String(this).replace(new RegExp(`\\${str}`, "gs"), replacement);
};

// main.ts
var pluginName = "Pretty BibTeX";
var PrettyBibTexPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SettingTab(this.app, this));
    this.registerMarkdownCodeBlockProcessor("bibtex", (source, el, ctx) => {
      const codeBlock = el.createEl("div").createEl("pre").createEl("code");
      const regExpBibTex = new RegExp("@(?<type>.*?){\\s*(?<id>.*?),(?<attributes>.*)}", "s");
      const matchBibTex = source.match(regExpBibTex);
      if (matchBibTex && matchBibTex.groups) {
        const type = matchBibTex.groups.type;
        const id = matchBibTex.groups.id;
        codeBlock.createEl("span", { text: `${id}
`, cls: "bibtex header" });
        if (this.settings.showType)
          this.addKeyValueToCodeBlock(codeBlock, "Type", type);
        const lines = matchBibTex.groups.attributes.split(/\r?\n/).map((line) => line.trim()).filter((line) => line);
        const attributes = [];
        const regExpHasKeyValue = new RegExp("^\\w+\\s*=\\s*\\S");
        for (let i = 0; i < lines.length; i++) {
          const line = lines[i];
          const hasKeyValue = regExpHasKeyValue.test(line);
          if (hasKeyValue) {
            attributes.push(line);
          } else if (attributes.length > 0) {
            attributes[attributes.length - 1] = attributes[attributes.length - 1].concat(` ${line}`);
          }
        }
        for (const attribute of attributes) {
          const regExpAttributes = new RegExp("(?<key>\\w+)\\s*=\\s*(?<value>.*)", "g");
          for (const match of attribute.matchAll(regExpAttributes)) {
            if (!match.groups)
              continue;
            const key = match.groups.key;
            const value = match.groups.value.trim().replaceAll("{", "").replaceAll("}", "").trimString(",").trimString('"');
            this.addKeyValueToCodeBlock(codeBlock, key, value);
          }
        }
      } else {
        codeBlock.createEl("span", { text: "Invalid BibTeX format!", cls: "bibtex key" });
      }
    });
  }
  addKeyValueToCodeBlock(codeBlock, key, value) {
    codeBlock.createEl("span", { text: StringHelper.sanitizeKeyString(key), cls: "bibtex key" });
    codeBlock.createEl("span", { text: ":", cls: "bibtex normal" });
    codeBlock.createEl("span", { text: ` ${value}
`, cls: "bibtex value" });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var DEFAULT_SETTINGS = {
  showType: true
};
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: `Settings for ${pluginName}` });
    new import_obsidian.Setting(containerEl).setName("Show Type").setDesc('Shows the type e.g. "article"').addToggle((toggle) => toggle.setValue(this.plugin.settings.showType).onChange(async (value) => {
      this.plugin.settings.showType = value;
      await this.plugin.saveSettings();
    }));
  }
};
